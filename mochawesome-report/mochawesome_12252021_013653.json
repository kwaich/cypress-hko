{
  "stats": {
    "suites": 3,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2021-12-24T17:36:46.798Z",
    "end": "2021-12-24T17:36:53.212Z",
    "duration": 6414,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "56d19a90-9896-457b-bb88-c41099857f5e",
      "title": "",
      "fullFile": "cypress/integration/weather.spec.js",
      "file": "cypress/integration/weather.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4ce34c10-0618-42ce-af68-e764f3f20a93",
          "title": "Weather API",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "a9c95d77-b626-4f1d-a7d6-d7ebf85d2be5",
              "title": "GET /weather.php Current Weather Report (rhrread)",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return current weather report (rhrread)",
                  "fullTitle": "Weather API GET /weather.php Current Weather Report (rhrread) should return current weather report (rhrread)",
                  "timedOut": null,
                  "duration": 607,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: baseUrl + '/weather.php',\n  qs: {\n    dataType: 'rhrread'\n  }\n}).should(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.headers.connection).to.eq('Keep-Alive');\n  expect(response.headers[\"content-type\"]).to.eq('application/json; charset=utf-8');\n  expect(response.body).to.include.all.keys('rainfall', 'icon', 'iconUpdateTime', 'uvindex', 'updateTime', 'warningMessage', 'temperature', 'humidity');\n  expect(response.body.rainfall).to.have.all.keys('data', 'startTime', 'endTime');\n  Cypress._.each(response.body.rainfall.data, data => {\n    expect(data).to.include.all.keys('unit', 'place', 'main');\n  });\n  expect(response.body.temperature).to.have.all.keys('recordTime', 'data');\n  Cypress._.each(response.body.temperature.data, data => {\n    expect(data).to.have.all.keys('unit', 'value', 'place');\n  });\n  expect(response.body.humidity).to.have.all.keys('recordTime', 'data');\n  Cypress._.each(response.body.humidity.data, data => {\n    expect(data).to.have.all.keys('unit', 'value', 'place');\n  });\n});",
                  "err": {},
                  "uuid": "d36aa667-0752-4a9c-855c-a7f194fa41cb",
                  "parentUUID": "a9c95d77-b626-4f1d-a7d6-d7ebf85d2be5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return current weather report (rhrread) english",
                  "fullTitle": "Weather API GET /weather.php Current Weather Report (rhrread) should return current weather report (rhrread) english",
                  "timedOut": null,
                  "duration": 511,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: baseUrl + '/weather.php',\n  qs: {\n    dataType: 'rhrread',\n    lang: 'en'\n  }\n}).should(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.headers.connection).to.eq('Keep-Alive');\n  expect(response.headers[\"content-type\"]).to.eq('application/json; charset=utf-8');\n  expect(response.body).to.include.all.keys('rainfall', 'icon', 'iconUpdateTime', 'uvindex', 'updateTime', 'warningMessage', 'temperature', 'humidity');\n  expect(response.body.rainfall).to.have.all.keys('data', 'startTime', 'endTime');\n  Cypress._.each(response.body.rainfall.data, data => {\n    expect(data).to.include.all.keys('unit', 'place', 'main');\n  });\n  expect(response.body.temperature).to.have.all.keys('recordTime', 'data');\n  Cypress._.each(response.body.temperature.data, data => {\n    expect(data).to.have.all.keys('unit', 'value', 'place');\n  });\n  expect(response.body.humidity).to.have.all.keys('recordTime', 'data');\n  Cypress._.each(response.body.humidity.data, data => {\n    expect(data).to.have.all.keys('unit', 'value', 'place');\n  });\n});",
                  "err": {},
                  "uuid": "e5360eb1-6238-4651-8145-2258df567aa1",
                  "parentUUID": "a9c95d77-b626-4f1d-a7d6-d7ebf85d2be5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return current weather report (rhrread) traditional chinese",
                  "fullTitle": "Weather API GET /weather.php Current Weather Report (rhrread) should return current weather report (rhrread) traditional chinese",
                  "timedOut": null,
                  "duration": 490,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: baseUrl + '/weather.php',\n  qs: {\n    dataType: 'rhrread',\n    lang: 'tc'\n  }\n}).should(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.headers.connection).to.eq('Keep-Alive');\n  expect(response.headers[\"content-type\"]).to.eq('application/json; charset=utf-8');\n  expect(response.body).to.include.all.keys('rainfall', 'icon', 'iconUpdateTime', 'uvindex', 'updateTime', 'warningMessage', 'temperature', 'humidity');\n  expect(response.body.rainfall).to.have.all.keys('data', 'startTime', 'endTime');\n  Cypress._.each(response.body.rainfall.data, data => {\n    expect(data).to.include.all.keys('unit', 'place', 'main');\n  });\n  expect(response.body.temperature).to.have.all.keys('recordTime', 'data');\n  Cypress._.each(response.body.temperature.data, data => {\n    expect(data).to.have.all.keys('unit', 'value', 'place');\n  });\n  expect(response.body.humidity).to.have.all.keys('recordTime', 'data');\n  Cypress._.each(response.body.humidity.data, data => {\n    expect(data).to.have.all.keys('unit', 'value', 'place');\n  });\n});",
                  "err": {},
                  "uuid": "c6c40465-adb7-4dd9-92d4-7072701a9c72",
                  "parentUUID": "a9c95d77-b626-4f1d-a7d6-d7ebf85d2be5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return current weather report (rhrread) simpified chinese",
                  "fullTitle": "Weather API GET /weather.php Current Weather Report (rhrread) should return current weather report (rhrread) simpified chinese",
                  "timedOut": null,
                  "duration": 473,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: baseUrl + '/weather.php',\n  qs: {\n    dataType: 'rhrread',\n    lang: 'sc'\n  }\n}).should(response => {\n  cy.log(JSON.stringify(response.body));\n  expect(response.status).to.eq(200);\n  expect(response.headers.connection).to.eq('Keep-Alive');\n  expect(response.headers[\"content-type\"]).to.eq('application/json; charset=utf-8');\n  expect(response.body).to.include.all.keys('rainfall', 'icon', 'iconUpdateTime', 'uvindex', 'updateTime', 'warningMessage', 'temperature', 'humidity');\n  expect(response.body.rainfall).to.have.all.keys('data', 'startTime', 'endTime');\n  Cypress._.each(response.body.rainfall.data, data => {\n    expect(data).to.include.all.keys('unit', 'place', 'main');\n  });\n  expect(response.body.temperature).to.have.all.keys('recordTime', 'data');\n  Cypress._.each(response.body.temperature.data, data => {\n    expect(data).to.have.all.keys('unit', 'value', 'place');\n  });\n  expect(response.body.humidity).to.have.all.keys('recordTime', 'data');\n  Cypress._.each(response.body.humidity.data, data => {\n    expect(data).to.have.all.keys('unit', 'value', 'place');\n  });\n});",
                  "err": {},
                  "uuid": "83df4eb3-fc71-420e-b092-45e082c41ac7",
                  "parentUUID": "a9c95d77-b626-4f1d-a7d6-d7ebf85d2be5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d36aa667-0752-4a9c-855c-a7f194fa41cb",
                "e5360eb1-6238-4651-8145-2258df567aa1",
                "c6c40465-adb7-4dd9-92d4-7072701a9c72",
                "83df4eb3-fc71-420e-b092-45e082c41ac7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2081,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4b647ab0-e4b7-4509-b314-be1516463dd8",
              "title": "GET /weather.php negative tests",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return error: invalid language",
                  "fullTitle": "Weather API GET /weather.php negative tests should return error: invalid language",
                  "timedOut": null,
                  "duration": 443,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: baseUrl + '/weather.php',\n  qs: {\n    dataType: 'rhrread',\n    lang: 'co'\n  }\n}).should(response => {\n  cy.log(JSON.stringify(response.headers));\n  expect(response.status).to.eq(200);\n  expect(response.headers.connection).to.eq('Keep-Alive');\n  expect(response.headers[\"content-type\"]).to.eq('text/html; charset=utf-8');\n  expect(response.body).to.include(\"Please include valid parameters in API request.\");\n});",
                  "err": {},
                  "uuid": "0567e5cb-2a6d-4472-aeea-c055080e80f7",
                  "parentUUID": "4b647ab0-e4b7-4509-b314-be1516463dd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error: invalid dataType",
                  "fullTitle": "Weather API GET /weather.php negative tests should return error: invalid dataType",
                  "timedOut": null,
                  "duration": 282,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: baseUrl + '/weather.php',\n  qs: {\n    dataType: 'abc'\n  }\n}).should(response => {\n  cy.log(JSON.stringify(response.headers));\n  expect(response.status).to.eq(200);\n  expect(response.headers.connection).to.eq('Keep-Alive');\n  expect(response.headers[\"content-type\"]).to.eq('text/html; charset=utf-8');\n  expect(response.body).to.include(\"Please include valid parameters in API request.\");\n});",
                  "err": {},
                  "uuid": "5c9de5fd-ff3e-4dc0-bab1-96b7b8cfbe53",
                  "parentUUID": "4b647ab0-e4b7-4509-b314-be1516463dd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error: dataType incorrect type",
                  "fullTitle": "Weather API GET /weather.php negative tests should return error: dataType incorrect type",
                  "timedOut": null,
                  "duration": 261,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: baseUrl + '/weather.php',\n  qs: {\n    dataType: 123\n  }\n}).should(response => {\n  cy.log(JSON.stringify(response.headers));\n  expect(response.status).to.eq(200);\n  expect(response.headers.connection).to.eq('Keep-Alive');\n  expect(response.headers[\"content-type\"]).to.eq('text/html; charset=utf-8');\n  expect(response.body).to.include(\"Please include valid parameters in API request.\");\n});",
                  "err": {},
                  "uuid": "020ca4b5-1a5d-4c2b-a3a5-b9d744fa728d",
                  "parentUUID": "4b647ab0-e4b7-4509-b314-be1516463dd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error: lang incorrect type",
                  "fullTitle": "Weather API GET /weather.php negative tests should return error: lang incorrect type",
                  "timedOut": null,
                  "duration": 256,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: baseUrl + '/weather.php',\n  qs: {\n    dataType: \"rhrread\",\n    lang: 123\n  }\n}).should(response => {\n  cy.log(JSON.stringify(response.headers));\n  expect(response.status).to.eq(200);\n  expect(response.headers.connection).to.eq('Keep-Alive');\n  expect(response.headers[\"content-type\"]).to.eq('text/html; charset=utf-8');\n  expect(response.body).to.include(\"Please include valid parameters in API request.\");\n});",
                  "err": {},
                  "uuid": "aaef185f-dd92-4993-b706-82f0b05d67f3",
                  "parentUUID": "4b647ab0-e4b7-4509-b314-be1516463dd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error: no parameter",
                  "fullTitle": "Weather API GET /weather.php negative tests should return error: no parameter",
                  "timedOut": null,
                  "duration": 278,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: baseUrl + '/weather.php'\n}).should(response => {\n  cy.log(JSON.stringify(response.headers));\n  expect(response.status).to.eq(200);\n  expect(response.headers.connection).to.eq('Keep-Alive');\n  expect(response.headers[\"content-type\"]).to.eq('text/html; charset=utf-8');\n  expect(response.body).to.include(\"Please include valid parameters in API request.\");\n});",
                  "err": {},
                  "uuid": "4ad504ea-cc31-4a01-a00d-360a9ec959bc",
                  "parentUUID": "4b647ab0-e4b7-4509-b314-be1516463dd8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return error: wrong parameter",
                  "fullTitle": "Weather API GET /weather.php negative tests should return error: wrong parameter",
                  "timedOut": null,
                  "duration": 258,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'GET',\n  url: baseUrl + '/weather.php',\n  qs: {\n    dataTypex: \"rhrread\",\n    langx: 'en'\n  }\n}).should(response => {\n  cy.log(JSON.stringify(response.headers));\n  expect(response.status).to.eq(200);\n  expect(response.headers.connection).to.eq('Keep-Alive');\n  expect(response.headers[\"content-type\"]).to.eq('text/html; charset=utf-8');\n  expect(response.body).to.include(\"Please include valid parameters in API request.\");\n});",
                  "err": {},
                  "uuid": "e0178290-05eb-4f44-a759-ae31acc1cd72",
                  "parentUUID": "4b647ab0-e4b7-4509-b314-be1516463dd8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0567e5cb-2a6d-4472-aeea-c055080e80f7",
                "5c9de5fd-ff3e-4dc0-bab1-96b7b8cfbe53",
                "020ca4b5-1a5d-4c2b-a3a5-b9d744fa728d",
                "aaef185f-dd92-4993-b706-82f0b05d67f3",
                "4ad504ea-cc31-4a01-a00d-360a9ec959bc",
                "e0178290-05eb-4f44-a759-ae31acc1cd72"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1778,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "reportdir": "cypress/report/mochawesome-report",
        "overwrite": false,
        "html": true,
        "json": true,
        "timestamp": "mmddyyyy_HHMMss"
      },
      "version": "6.0.1"
    }
  }
}